Script                                            	Purpose                       
while_loop.lua                                    	>>> Missing comment           
passing_functions.lua                             	>>> Missing comment           
count_3s_7s.lua                                   	-- Count numbers 3 and 7      
statefulIterator-3.lua                            	--- Generates squares of numbers up to a specified maximum.
call_module.lua                                   	local mymodule = require("test_module")
coroutines/coroutine-1.lua                        	local function myCoroutine()  
coroutines/coroutine-2.lua                        	local coroutine_1 = coroutine.create(function()
coroutines/coroutine-3.lua                        	-- Define a function to get numbers using a coroutine
classes-2.lua                                     	>>> Missing comment           
common_functions.lua                              	--                            
test_module.lua                                   		name = "John",               
printing_values_oneline.lua                       	-- Printing values in one line
for_loop.lua                                      	for count = 1, 100 do         
adding_to_tables.lua                              	--                            
function_variadic_with_input.lua                  	>>> Missing comment           
string_length.lua                                 	--                            
main.lua                                          	--- Review of Lua Script      
fibonacciIterator.lua                             	local function fibonacci()    
files.lua                                         	>>> Missing comment           
factorial.lua                                     	-- Function to calculate the factorial of a number.
statefulIterator-2.lua                            	--- Stateful iterator to generate squares of numbers.
iterator.lua                                      	function Iterator()           
menu.lua                                          	local enemy_x, enemy_y = 0, 0 
nestedTables.lua                                  		{ name = "Alice", age = 25 },
prime_numbers.lua                                 	>>> Missing comment           
print_array.lua                                   	local array = { "Lua", "Tutorial" }
function_variadic.lua                             	>>> Missing comment           
arrays-1.lua                                      	local num_rows = tonumber(io.read("*line"))
classes-1.lua                                     	-- Define the BankAccount class
count_table_elements.lua                          	--- Counting elements in a Lua table using ipairs, pairs, and a custom iterator.
tostring_table.lua                                	-- Create a table "mytable" with values 10, 20, and 30
test.lua                                          	>>> Missing comment           
customErrorHandler.lua                            	local function logError(err)  
inheritance.lua                                   	--- Pet module defines a basic pet with a name and status.
conditional.lua                                   	>>> Missing comment           
multidimensional_array.lua                        	local rows = 3                
2DArray-2.lua                                     	-- This module demonstrates the creation and manipulation of a 2D array (matrix) in Lua.
2DArray-1.lua                                     	>>> Missing comment           
statefulIterator-1.lua                            		local state = "initial"      
arrayIterator.lua                                 	-- Define an array of days of the week
assert_function.lua                               	local function divide(a, b)   
metatables/add_metatable.lua                      	--                            
metatables/call_method_metatables-1.lua           	-- Create a table "mytable" and set its metatable to define custom behavior for
metatables/metatablescustomAssignment.lua         	local customTable = {}        
metatables/metatablesComparison.lua               	local tableB = { 1, 2, 3 }    
metatables/metables-operatorOverloading.lua       	local customMetatable = {     
metatables/call_method_metatables-2.lua           	-- Create a table "mytable" and set its metatable to define custom behavior for
metatables/getmetatable-1.lua                     	local myTable = { name = "John", age = 30 }
metatables/metatable_index.lua                    	local person = {              
metatables/vector3d-metatables-solution.lua       	local vector3d = {}           
metatables/metables-formatOutput.lua              	local customTable = { "a", "Carlos", 1 }
metatables/metatables-2.lua                       	You have a person table with fields name and age.
metatables/metatables_customIndexing.lua          	local customTable = {}        
user_input.lua                                    	>>> Missing comment           
nested_for.lua                                    	>>> Missing comment           
console_input.lua                                 	-- Read from console          
